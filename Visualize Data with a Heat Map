<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Heat Map Visualization</title>
  <script src="https://d3js.org/d3.v6.min.js"></script>
  <style>
    body { font-family: Arial, sans-serif; text-align: center; background-color: #f4f4f4; }
    #heatmap { margin: auto; }
    .cell { stroke: #fff; }
    #tooltip { position: absolute; background: lightgray; padding: 5px; border: 1px solid black; pointer-events: none; opacity: 0; }
    #legend rect { stroke: black; }
  </style>
</head>
<body>
  <h1 id="title">Global Temperature Variations</h1>
  <p id="description">Monthly Global Land-Surface Temperature from 1753 to 2015</p>
  <div id="tooltip"></div>
  <svg id="heatmap"></svg>
  <svg id="legend"></svg>

  <script>
    const url = 'https://raw.githubusercontent.com/freeCodeCamp/ProjectReferenceData/master/global-temperature.json';
    const width = 1200, height = 500, padding = 60;

    const svg = d3.select('#heatmap')
                  .attr('width', width)
                  .attr('height', height);

    d3.json(url).then(data => {
      const baseTemp = data.baseTemperature;
      const dataset = data.monthlyVariance;

      const xScale = d3.scaleBand()
                       .domain(dataset.map(d => d.year))
                       .range([padding, width - padding]);

      const yScale = d3.scaleBand()
                       .domain(d3.range(1, 13))
                       .range([padding, height - padding]);

      const colorScale = d3.scaleQuantize()
                           .domain([d3.min(dataset, d => baseTemp + d.variance), d3.max(dataset, d => baseTemp + d.variance)])
                           .range(['#4575b4', '#91bfdb', '#fee090', '#d73027']);

      svg.selectAll('.cell')
         .data(dataset)
         .enter()
         .append('rect')
         .attr('class', 'cell')
         .attr('data-month', d => d.month)
         .attr('data-year', d => d.year)
         .attr('data-temp', d => baseTemp + d.variance)
         .attr('x', d => xScale(d.year))
         .attr('y', d => yScale(d.month))
         .attr('width', xScale.bandwidth())
         .attr('height', yScale.bandwidth())
         .attr('fill', d => colorScale(baseTemp + d.variance))
         .on('mouseover', function(event, d) {
           d3.select('#tooltip')
             .style('opacity', 1)
             .html(`Year: ${d.year}<br>Month: ${d.month}<br>Temp: ${(baseTemp + d.variance).toFixed(2)}Â°C`)
             .attr('data-year', d.year)
             .style('left', (event.pageX + 10) + 'px')
             .style('top', (event.pageY - 30) + 'px');
         })
         .on('mouseout', () => d3.select('#tooltip').style('opacity', 0));

      const xAxis = d3.axisBottom(xScale).tickValues(xScale.domain().filter(year => year % 10 === 0));
      const yAxis = d3.axisLeft(yScale).tickFormat(month => d3.timeFormat('%B')(new Date(0, month - 1)));

      svg.append('g')
         .attr('id', 'x-axis')
         .attr('transform', `translate(0, ${height - padding})`)
         .call(xAxis);

      svg.append('g')
         .attr('id', 'y-axis')
         .attr('transform', `translate(${padding}, 0)`)
         .call(yAxis);

      const legend = d3.select('#legend')
                       .attr('width', 400)
                       .attr('height', 50);

      const legendColors = colorScale.range();

      legend.selectAll('rect')
            .data(legendColors)
            .enter()
            .append('rect')
            .attr('x', (d, i) => i * 100)
            .attr('y', 10)
            .attr('width', 100)
            .attr('height', 20)
            .attr('fill', d => d);
    });
  </script>
</body>
</html>
